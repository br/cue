#!/bin/bash

function git_project {
  gitname=$(\git config remote.origin.name)
  if [[ -z $gitname ]]; then
    gitname=$(basename $(\git config remote.origin.url) .git)
  fi
  echo "$gitname"
}

function git_branch {
  \git branch 2>&- | awk '$1 == "*" { print $2 }' || true
} 

function git_status {
  gitstat=$(mktemp -t XXXXXX)
  \git status --ignore-submodules=dirty 2>/dev/null > $gitstat
 
  if [[ $(grep -c "# Your branch is ahead" $gitstat) > 0 ]]; then
    echo -n "^"
  elif [[ $(grep -c "# Your branch is behind" $gitstat) > 0 ]]; then
    echo -n "v"
  else
    echo -n ":"
  fi

  echo -n " "

  if [[ $(grep -c "# Changes" $gitstat) > 0 ]]; then
    num=$(sed -n '/^# Changes/,/^# [^ ]/p' $gitstat | grep '^#	' | wc -l | awk '{print $1}')
    if [[ "$num" -gt 9 ]]; then
        echo -n "!!{$num}!!"
    else
      while [[ "$num" > 0 ]]; do 
      echo -n "!"
      num=$((num -1))
      done
    fi
  fi

  if [[ $(grep -c "# Changed" $gitstat) > 0 ]]; then
    num=$(sed -n '/^# Changed/,/^# [^ ]/p' $gitstat | grep '^#	' | wc -l | awk '{print 1}')
    if [[ "$num" -gt 9 ]]; then
        echo -n "??{$num}??"
    else
        while [[ "$num" > 0 ]]; do 
        echo -n "?"
        num=$((num -1))
        done
    fi
  fi

  if [[ $(grep -c "# Untracked" $gitstat) > 0 ]]; then
    num=$(sed -n '/^# Untracked/,/^# [^ ]/p' $gitstat | grep '^#	' | wc -l | awk '{print $1}')
    if [[ "$num" -gt 9 ]]; then
        echo -n "**{$num}**"
    else
        while [[ "$num" > 0 ]]; do 
        echo -n "*"
        num=$((num -1))
        done
    fi
  fi

  rm -f $gitstat
}

function prompt_error {
  # optional error
  local err_last="$?"
  if [[ -n $err_last && $err_last != 0 ]]; then
    echo " ${sorange}[${sred}$err_last${sorange}]"
  fi
}

function prompt_git {
  # optional git
  local tmp_branch="$(mktemp -t XXXXXXXXX)"
  local tmp_project="$(mktemp -t XXXXXXXXX)"
  git_branch > $tmp_branch &
  git_project > $tmp_project &
  wait
  local nm_branch="$(cat $tmp_branch)"
  local nm_project="$(cat $tmp_project)"
  rm -f $tmp_branch $tmp_project
  if [[ -n $nm_branch ]]; then
    local gstatus=$(git_status)
    if [[ ${gstatus% *} = ":" ]]; then
      clr_gstatus="${sdcomment}"
    else
      clr_gstatus="${syellow}"
    fi
    echo " ${sdhigh}$nm_branch${clr_gstatus}${gstatus% *}${sdhigh}$nm_project${syellow}${gstatus#* }"
  fi
}

function prompt_ssh {
  # ssh trail
  local hst_this
  if [[ -f $HOME/.name ]]; then
    hst_this=$(cat $HOME/.name)
  else
    hst_this=$(hostname | awk -F.  'BEGIN { OFS="."; } {$(NF-1)=""; $NF=""; print $0; }' | sed 's#[.]*$##')
  fi

  if [[ -z $hst_this ]]; then
    hst_this=$(hostname -s)
  fi

  local txt_origin
  if [[ -n $LX_ORIGIN && -z $LZ_FROM ]]; then
    txt_origin="/$LX_ORIGIN"
    export LX_ORIGIN="$hst_this${txt_origin}"
  fi

  if [[ -n $LX_ORIGIN && $LX_ORIGIN != "$hst_this" ]]; then
    echo " ${sdhigh}$LOGNAME@$hst_this${sdcomment}${txt_origin}"
  else
    echo " ${sdhigh}$LOGNAME@$hst_this"
  fi
}

function prompt_pwd {
  # pwd
  echo " ${sdhigh}${PWD/$HOME/~}"
}

function prompt_shell {
  echo " $SHLVL:$HISTCMD"
}

function prompt_filler {
  local prn_prompt="$1"; shift
  # filler
  if [[ -z $COLUMNS ]]; then
    eval $(resize)
  fi

  local len_prompt=$(echo -n "$prn_prompt" | perl -pe 's{\e\[\d+;\d+m}{}g' | wc -c | tr -d " ")
  local txt_fill=" "
  for _ in $(eval echo {1..$((COLUMNS - len_prompt - 1))}); do
    txt_fill="${txt_fill}-"
  done
  echo "${sdcomment}${txt_fill}"
}

function prompt {
  prn_git="$(prompt_git)"
  prn_pwd="$(prompt_pwd)"
  prn_ssh="$(prompt_ssh)"
  prn_shell="$(prompt_shell)"
  prn_error="$(prompt_error)"
  prn_fill="$(prompt_filler "--$prn_git$prn_pwd$prn_ssh --")"
}

PROMPT_COMMAND=prompt
PS1="\
\${sdcomment}--\${prn_git}\${prn_pwd}\${prn_fill}\$prn_ssh\${sdcomment} --\${sdhigh}
--\${prn_shell}\${prn_error} => "
PS2="\${sdhigh} > "
 
# vim: ts=2 sw=2 et
