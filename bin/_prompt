#!/bin/bash

function git_project {
  gitname=$(\git config remote.origin.name)
  if [[ -z $gitname ]]; then
    gitname=$(basename $(\git config remote.origin.url) .git)
  fi
  echo "$gitname"
}

function git_branch {
  \git branch 2>&- | awk '$1 == "*" { print $2 }' || true
} 

function git_status {
  gitstat=$(mktemp -t XXXXXX)
  \git status --ignore-submodules=dirty 2>/dev/null > $gitstat
 
  if [[ $(grep -c "# Your branch is ahead" $gitstat) > 0 ]]; then
    echo -n "^"
  elif [[ $(grep -c "# Your branch is behind" $gitstat) > 0 ]]; then
    echo -n "v"
  else
    echo -n ":"
  fi

  echo -n " "

  if [[ $(grep -c "# Changes" $gitstat) > 0 ]]; then
    num=$(sed -n '/^# Changes/,/^# [^ ]/p' $gitstat | grep '^#	' | wc -l | awk '{print $1}')
    if [[ "$num" -gt 9 ]]; then
        echo -n "!!{$num}!!"
    else
      while [[ "$num" > 0 ]]; do 
      echo -n "!"
      num=$((num -1))
      done
    fi
  fi

  if [[ $(grep -c "# Changed" $gitstat) > 0 ]]; then
    num=$(sed -n '/^# Changed/,/^# [^ ]/p' $gitstat | grep '^#	' | wc -l | awk '{print 1}')
    if [[ "$num" -gt 9 ]]; then
        echo -n "??{$num}??"
    else
        while [[ "$num" > 0 ]]; do 
        echo -n "?"
        num=$((num -1))
        done
    fi
  fi

  if [[ $(grep -c "# Untracked" $gitstat) > 0 ]]; then
    num=$(sed -n '/^# Untracked/,/^# [^ ]/p' $gitstat | grep '^#	' | wc -l | awk '{print $1}')
    if [[ "$num" -gt 9 ]]; then
        echo -n "**{$num}**"
    else
        while [[ "$num" > 0 ]]; do 
        echo -n "*"
        num=$((num -1))
        done
    fi
  fi

  rm -f $gitstat
}

function prompt {
  local err_last="$?"

  local hst_this

  if [[ -f $HOME/.name ]]; then
    hst_this=$(cat $HOME/.name)
  else
    hst_this=$(hostname | awk -F.  'BEGIN { OFS="."; } {$(NF-1)=""; $NF=""; print $0; }' | sed 's#[.]*$##')
  fi

  if [[ -z $hst_this ]]; then
    hst_this=$(hostname -s)
  fi

  local txt_ssh_trail
  if [[ -n $LX_ORIGIN && -z $LZ_FROM ]]; then
    txt_ssh_trail="/$LX_ORIGIN"
    LX_ORIGIN="$hst_this/$LX_ORIGIN"
    LZ_FROM="$hst_this"
  elif [[ $LZ_FROM != $hst_this ]]; then
    txt_ssh_trail=""
    LX_ORIGIN="$hst_this"
    LZ_FROM=$hst_this
  fi
  export LX_ORIGIN LZ_FROM

  if [[ -n $LX_ORIGIN && $LX_ORIGIN != $LZ_FROM ]]; then
    prn_ssh_trail="${sdhigh}$LOGNAME@$hst_this${sdcomment}txt_ssh_origin"
    txt_ssh_trail="$LOGNAME@$LX_ORIGIN"
  else
    prn_ssh_trail="${sdhigh}$LOGNAME@$hst_this"
    txt_ssh_trail="$LOGNAME@$hst_this"
  fi

  txt_prompt=""
  prn_prompt="" 

  prn_prompt="${sdcomment}-- ${sdhigh}${PWD/$HOME/~}$prn_prompt"
  txt_prompt="-- ${PWD/$HOME/~} $txt_prompt"

  local nm_branch=$(git_branch)
  local nm_project=$(git_project)
  if [[ -n $nm_branch ]]; then
    local gstatus=$(git_status)
    if [[ ${gstatus% *} = ":" ]]; then
      clr_gstatus="${sdcomment}"
    else
      clr_gstatus="${syellow}"
    fi
    prn_prompt="${sdcomment}-- ${sdhigh}$nm_branch${clr_gstatus}${gstatus% *}${sdhigh}$nm_project${scyan}${gstatus#* } $prn_prompt"
    txt_prompt="-- $nm_branch${gstatus% *}$nm_project${gstatus#* } $txt_prompt"
fi

  if [[ -z $COLUMNS ]]; then
    eval $(resize)
  fi

  local len_prompt=$(echo -n "$txt_prompt $txt_ssh_trail --" | wc -c | tr -d " ")
  local len_rfill=$((COLUMNS - len_prompt))
  txt_fill=""
  while [[ $len_rfill > 0 && ${len_rfill##-*}x != "x" ]]; do
    txt_fill="${txt_fill}-"
    len_rfill=$((len_rfill - 1))
  done
   
  if [[ $len_rfill < 0 ]]; then
    local len_cut=$((len_rfill))
    txt_prompt="...$(echo -n $txt_prompt | sed -e "s/\(^.\{$len_cut\}\)\(.*\)/\2/")"
  fi

  if [[ -n $err_last && $err_last != 0 ]]; then
    prn_error="${sorange}[${sred}$err_last${sorange}] "
  else
    prn_error=""
  fi
}

PROMPT_COMMAND=prompt
PS1="\$prn_prompt \${sdcomment}\$txt_fill \$prn_ssh_trail \${sdcomment}--\n\${sdcomment}-- \${sdtext}\$SHLVL:\$HISTCMD \${prn_error}\${sdhigh}=> "
PS2="\${sdhigh} > "
 
# vim: ts=2 sw=2 et
